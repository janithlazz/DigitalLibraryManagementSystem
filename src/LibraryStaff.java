import java.time.LocalDate;

public class LibraryStaff extends Person {
    private String staffId;
    private String position;
    private LocalDate hireDate;

    public LibraryStaff(String id, String name, String contactInfo, String staffId, String position) {
        super(id, name, contactInfo, LocalDate.now());
        this.staffId = staffId;
        this.position = position;
        this.hireDate = LocalDate.now();
    }

    // Constructor with custom hire date
    public LibraryStaff(String id, String name, String contactInfo, String staffId,
                        String position, LocalDate hireDate) {
        super(id, name, contactInfo, LocalDate.now());
        this.staffId = staffId;
        this.position = position;
        this.hireDate = hireDate;
    }

    @Override
    public String getRole() {
        return null;
    }
    public boolean addItemToLibrary(LibraryItem item, Library library){
        if(item == null || library == null){
            System.out.println("Invalid item or library reference.");
            return false;
        }
        boolean success = library.addItem(item);
        if(success){
            System.out.println("Staff member " + getName() + " added item: " + item.getTitle());
        }
        return success;
    }
    public boolean removeItemFromLibrary(String itemId, Library library){
        if(itemId == null || library == null){
            System.out.println("Invalid itemID or library reference.");
            return false;
        }
        boolean success = library.removeItem(itemId);
        if (success) {
            System.out.println("Staff member " + getName() + " removed item with ID: " + itemId);
        }
        return success;
    }
    public boolean registerPatron(Patron patron, Library library){
        if(patron == null || library == null){
            System.out.println("Invalid patron or library reference");
            return false;
        }
        boolean success = library.registerPerson(patron);
        if (success) {
            System.out.println("Staff member " + getName() + " registered new patron: " + patron.getName());
        }
        return success;
    }
    public boolean processFinePayment(Patron patron, double amount) {
        if (patron == null || amount <= 0) {
            System.out.println("Invalid patron or payment amount.");
            return false;
        }

        double outstandingFines = patron.getOutstandingFines();
        if (outstandingFines <= 0) {
            System.out.println("Patron " + patron.getName() + " has no outstanding fines.");
            return false;
        }

        boolean success = patron.payFine(amount);
        if (success) {
            System.out.println("Staff member " + getName() + " processed payment of $" +
                    amount + " for patron " + patron.getName());
        }
        return success;
    }
    public boolean overrideDueDate(LibraryItem item, LocalDate newDueDate) {
        if (item == null || newDueDate == null) {
            System.out.println("Invalid item or due date.");
            return false;
        }

        if (!item.isCheckedOut()) {
            System.out.println("Cannot override due date for an item that is not checked out.");
            return false;
        }

        if (newDueDate.isBefore(LocalDate.now())) {
            System.out.println("New due date cannot be in the past.");
            return false;
        }

        // Using reflection or direct access would be needed here since setDueDate is protected
        // For simplicity, we'll assume the staff has permission to modify the due date
        item.setDueDate(newDueDate);

        System.out.println("Staff member " + getName() + " updated due date for '" +
                item.getTitle() + "' to " + newDueDate);
        return true;
    }
    public Patron findPatronByName(String name, Library library) {
        if (name == null || name.trim().isEmpty() || library == null) {
            return null;
        }

        String searchName = name.toLowerCase();

        for (Person person : library.getPeople().values()) {
            if (person instanceof Patron &&
                    person.getName().toLowerCase().contains(searchName)) {
                return (Patron) person;
            }
        }

        System.out.println("No patron found with name containing: " + name);
        return null;
    }
    public void generateOverdueItemsReport(Library library){
        if(library == null){
            System.out.println("Invalid library reference.");
            return;
        }
        System.out.println("\n========== OVERDUE ITEMS REPORT ==========");
        System.out.println("Generated by: " + getName() + " (" + position + ")");
        System.out.println("Date: " + LocalDate.now() + "\n");
        boolean foundOverdue = false;
        LocalDate today = LocalDate.now();

        for (LibraryItem item : library.getItems().values()) {
            if (item.isCheckedOut() && item.getDueDate().isBefore(today)) {
                Person borrower = item.getBorrower();
                String borrowerName = borrower != null ? borrower.getName() : "Unknown borrower";

                System.out.println("Item: " + item.getTitle());
                System.out.println("  ID: " + item.getId());
                System.out.println("  Type: " + item.getItemType());
                System.out.println("  Due Date: " + item.getDueDate());
                System.out.println("  Days Overdue: " + (today.toEpochDay()-item.getDueDate().toEpochDay()));
                System.out.println("  Current Fine: $" + item.calculateFine());
                System.out.println("  Borrower: " + borrowerName);
                System.out.println();

                foundOverdue = true;
            }
        }

        if (!foundOverdue) {
            System.out.println("No overdue items found.");
        }

        System.out.println("=========================================");
    }



    public String getStaffId() {
        return staffId;
    }

    public String getPosition() {
        return position;
    }

    public LocalDate getHireDate() {
        return hireDate;
    }

    public void setStaffId(String staffId) {
        this.staffId = staffId;
    }

    public void setPosition(String position) {
        this.position = position;
    }

    public void setHireDate(LocalDate hireDate) {
        this.hireDate = hireDate;
    }
}
